import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:ez_deliver_tracksure/pages/EditPro.dart';
import 'package:ez_deliver_tracksure/pages/all.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'top_bar.dart';
import 'bottom_bar.dart';

// ‚ñº‚ñº‚ñº [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñº‚ñº‚ñº
// Import ‡∏´‡∏ô‡πâ‡∏≤ ProductStatus ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡πÑ‡∏î‡πâ
import 'product_status.dart'; // <-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (product_status.dart)
// ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñ≤‚ñ≤‚ñ≤

class Products extends StatefulWidget {
  const Products({super.key});

  @override
  State<Products> createState() => _ProductsState();
}

class _ProductsState extends State<Products> {
  // ‚ñº‚ñº‚ñº [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñº‚ñº‚ñº
  // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ selectedIndex ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" (‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà 2)
  int _selectedIndex = 1;
  // ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñ≤‚ñ≤‚ñ≤

  bool _isLoading = true;
  Map<String, dynamic>? _userData; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TopBar
  List<QueryDocumentSnapshot> _orders = []; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå

  @override
  void initState() {
    super.initState();
    _fetchData();
  }

  Future<void> _fetchData() async {
    User? user = FirebaseAuth.instance.currentUser;

    print('--- DEBUGGING ---');
    print('Current User UID from Auth: ${user?.uid}');
    print('-----------------');

    if (user == null) {
      if (mounted) setState(() => _isLoading = false);
      return;
    }

    try {
      final userDocFuture =
          FirebaseFirestore.instance.collection('customers').doc(user.uid).get();

      // ‚ñº‚ñº‚ñº [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñº‚ñº‚ñº
      // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° .where('status', whereIn: ['completed', 'delivered'])
      // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà "‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      final ordersFuture = FirebaseFirestore.instance
          .collection('orders')
          .where('customerId', isEqualTo: user.uid)
          .where('status', whereIn: ['completed', 'delivered']) // <-- ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
          .orderBy('createdAt', descending: true)
          .get();
      // ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñ≤‚ñ≤‚ñ≤

      final responses = await Future.wait([userDocFuture, ordersFuture]);
      final userDoc = responses[0] as DocumentSnapshot;
      final ordersSnapshot = responses[1] as QuerySnapshot;

      if (mounted) {
        setState(() {
          if (userDoc.exists) {
            _userData = userDoc.data() as Map<String, dynamic>?;
            print('‚úÖ SUCCESS: Found document! Data is: $_userData');
          } else {
            print(
                '‚ùå ERROR: Document with ID "${user.uid}" was NOT FOUND in "customers" collection.');
            _userData = null;
          }
          _orders = ordersSnapshot.docs;
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) setState(() => _isLoading = false);
      // ‡∏û‡∏¥‡∏°‡∏û‡πå Error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô Console (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Index)
      print("üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Products: $e");

      // ‚ñº‚ñº‚ñº [‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô] ‚ñº‚ñº‚ñº
      // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å Firestore Index
      // ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÉ‡∏ô Console ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ ‡∏à‡∏∞‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Index ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö
      // ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô] ‚ñ≤‚ñ≤‚ñ≤
    }
  }

  void _onItemTapped(int index) {
    // If the tapped item is the current one, do nothing.
    if (_selectedIndex == index) return;

    // ‚ñº‚ñº‚ñº [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñº‚ñº‚ñº
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô _selectedIndex ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢
    setState(() {
      _selectedIndex = index;
    });
    // ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñ≤‚ñ≤‚ñ≤

    switch (index) {
      case 0:
        Navigator.pushReplacement( // ‡πÉ‡∏ä‡πâ pushReplacement ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ã‡πâ‡∏≥
          context,
          MaterialPageRoute(builder: (context) => const HomeScreen()),
        );
        break;
      case 1:
        // ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ refresh ‡∏Å‡πá‡πÑ‡∏î‡πâ)
        // Navigator.pushReplacement(
        //   context,
        //   MaterialPageRoute(builder: (context) => const Products()),
        // );
        break;
      case 2:
        Navigator.pushReplacement( // ‡πÉ‡∏ä‡πâ pushReplacement
          context,
          MaterialPageRoute(builder: (context) => const EditPro()),
        );
        break;
    }
  }

  // --- WIDGETS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---

  Widget _buildShippingListCard(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(vertical: 20.0, horizontal: 15.0),
        decoration: BoxDecoration(
          color: const Color(0xFF074F77),
          borderRadius: BorderRadius.circular(15),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              spreadRadius: 2,
              blurRadius: 8,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        // ‚ñº‚ñº‚ñº [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñº‚ñº‚ñº
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Icon ‡πÅ‡∏•‡∏∞ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"
        child: const Stack(
          alignment: Alignment.center,
          children: [
            Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(Icons.history, color: Colors.white, size: 30), // <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Icon
                SizedBox(width: 12),
                Text(
                  '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', // <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            Align(
              alignment: Alignment.centerRight,
              child: Icon(
                Icons.arrow_forward_ios,
                color: Colors.white,
                size: 20,
              ),
            ),
          ],
        ),
        // ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñ≤‚ñ≤‚ñ≤
      ),
    );
  }

  Widget _buildDeliveryItemCard(QueryDocumentSnapshot orderDoc) {
    const Color primaryColor = Color(0xFF07AA7C);
    final data = orderDoc.data() as Map<String, dynamic>;

    final pickupLocation = data['pickupLocation'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á';
    final senderName = data['senderName'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á';
    final destination = data['destination'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á';
    final receiverName = data['receiverName'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö';
    final logoUrl = data['logoUrl'];

    // ‚ñº‚ñº‚ñº [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñº‚ñº‚ñº
    // ‡∏´‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á Card ‡∏î‡πâ‡∏ß‡∏¢ InkWell ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏î‡πâ
    return InkWell(
      onTap: () {
        // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Navigator ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ ProductStatus
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ProductStatus(orderId: orderDoc.id),
          ),
        );
      },
      child: Padding(
        // ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñ≤‚ñ≤‚ñ≤
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Container(
          padding: const EdgeInsets.all(10.0),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(15),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                spreadRadius: 1,
                blurRadius: 5,
                offset: const Offset(0, 3),
              ),
            ],
          ),
          child: Column(
            children: [
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    width: 90,
                    height: 90,
                    margin: const EdgeInsets.only(right: 15.0),
                    child: Center(
                      child: logoUrl != null
                          ? Image.network(
                              logoUrl,
                              errorBuilder: (context, error, stackTrace) =>
                                  const Icon(
                                Icons.delivery_dining,
                                color: primaryColor,
                                size: 70,
                              ),
                            )
                          : const Icon(
                              Icons.delivery_dining,
                              color: primaryColor,
                              size: 70,
                            ),
                    ),
                  ),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildLocationRow(
                          Icons.location_on,
                          Colors.red,
                          pickupLocation,
                          senderName,
                        ),
                        const SizedBox(height: 5),
                        _buildLocationRow(
                          Icons.location_on,
                          primaryColor,
                          destination,
                          receiverName, // <-- ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              // ‚ñº‚ñº‚ñº [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñº‚ñº‚ñº
              // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" ‡πÄ‡∏õ‡πá‡∏ô Badge "‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
              Align(
                alignment: Alignment.bottomRight,
                child: Container(
                  margin: const EdgeInsets.only(top: 5),
                  padding: const EdgeInsets.symmetric(
                    horizontal: 20,
                    vertical: 8,
                  ),
                  decoration: BoxDecoration(
                    color: const Color(0xFF90EE90), // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô (Light Green)
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: const Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(Icons.check_circle, color: Colors.black, size: 18), // Icon ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                      SizedBox(width: 8),
                      Text(
                        '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', // <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                        style: TextStyle(
                          color: Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              // ‚ñ≤‚ñ≤‚ñ≤ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‚ñ≤‚ñ≤‚ñ≤
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildLocationRow(
      IconData icon, Color color, String location, String name) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Icon(icon, color: color, size: 20),
        const SizedBox(width: 5),
        Flexible(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                location,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
                maxLines: 2, // ‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô
                overflow: TextOverflow.ellipsis,
              ),
              Text(
                name,
                style: const TextStyle(fontSize: 14, color: Colors.black54),
              ),
            ],
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      body: Column(
        children: [
          // ‡∏™‡πà‡∏ß‡∏ô TopBar
          _isLoading
              ? Container(
                  height: 250, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏ñ‡πâ‡∏≤ TopBar ‡∏™‡∏π‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ)
                  width: double.infinity,
                  decoration: const BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Color(0xFF07AA7C), Color(0xFF11598D)],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.only(
                      bottomLeft: Radius.circular(20),
                      bottomRight: Radius.circular(20),
                    ),
                  ),
                  child: const Center(
                    child: CircularProgressIndicator(color: Colors.white),
                  ),
                )
              : TopBar(
                  userName: _userData?['customer_name'] ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                  profileImageUrl: _userData?['profile_image_url'],
                  userAddress:
                      _userData?['customer_address'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
                ),

          // ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà scroll ‡πÑ‡∏î‡πâ
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 16),

                  // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á (Orders) ---
                  _buildShippingListCard(context),
                  const SizedBox(height: 10),
                  if (_isLoading)
                    const Center(
                        child: Padding(
                      padding: EdgeInsets.all(32.0),
                      child: CircularProgressIndicator(),
                    ))
                  else if (_orders.isEmpty)
                    const Center(
                        child: Padding(
                      padding: EdgeInsets.all(32.0),
                      child: Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                          style: TextStyle(fontSize: 18, color: Colors.grey)),
                    ))
                  else
                    Column(
                      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Card ‡∏à‡∏≤‡∏Å List ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                      children: _orders
                          .map((orderDoc) => _buildDeliveryItemCard(orderDoc))
                          .toList(),
                    ),

                  const SizedBox(height: 20), // Padding ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
                ],
              ),
            ),
          ),
        ],
      ),
      bottomNavigationBar: BottomBar(
        currentIndex: _selectedIndex,
        onItemSelected: _onItemTapped,
      ),
    );
  }
}

//#‡∏Ñ‡∏ß‡∏≤‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢‡∏¢